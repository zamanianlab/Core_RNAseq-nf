repo="Core_RNAseq-nf"

executor {
    name   = 'local'
    cpus   = 12
    memory = '32GB'
}

params {

   data="$PWD/data"
   output="$PWD/output"
   trace="$PWD/trace"

   aux="$PWD/${repo}/auxillary"

   large_core=8
   small_core=4

}

timeline {
  enabled = true
  file = "${params.trace}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.trace}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.trace}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.trace}/pipeline_dag.svg"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
